run test.r
ls
r test.r
i = 1
j = 2
k = i + j
print(k)
i = 1
j = 2
k = i + j
print(k)
library('rgdal')      # Lire et reprojeter les cartes
library('plotrix')    # Créer des échelles de couleurs
library('classInt')
install.packages("plotrix")
cs= rnorm(2, mean = 0, sd = 1)
set.seed(123)
cs= rnorm(2, mean = 0, sd = 1)
cw= rnorm(2, mean = 0, sd = 1)
d= rnorm(2, mean = 0, sd = 1)
cs= rnorm(2, mean = 0, sd = 1)
cw= rnorm(2, mean = 0, sd = 1)
d= rnorm(2, mean = 0, sd = 1)
set.seed(123)
cs= rnorm(2, mean = 0, sd = 1)
cw= rnorm(2, mean = 0, sd = 1)
d= rnorm(2, mean = 0, sd = 1)
library(Gumbel)
beta = 0.995
V <- matrix(0, 1, 1,N)
N = 10000
V <- matrix(0, 1, 1,N)
View(V)
V <- matrix(0, 2,N)
View(V)
View(V)
weight_kg = 55
weight_kg
weight_kg + 1
pwd
ls
ls
cd
setwd(~/Dropbox/IP/R)
setwd("~/Dropbox/IP/R")
weigth = 55
weight
weigth
weigth <- 60
weigth * 2
weightlb = weigth * 2.2
c(weightlb, weigth)
alberto = c(weightlb, weigth)
setwd("C:/Users/Clément/Desktop/Github/IP2019/R/r-novice-inflammation-data/data")
d = read.csv(file = "inflammation-01.csv", header = FALSE)
d[,1]
min_inf = apply(d,2,min)
plot(min_inf, xlab = "day", ylab = "maximum", main = "maximum inflammation by day")
input_1 <- 20
mySum <- function(input_1, input_2 = 10) {
output <- input_1 + input_2
return(output)
}
mySum(3)
mySum(input_1 = 1,3)
mySum(3)
mySum(input_2 = 1)
# Ex 5:
fence <- function(original, wrapper) {
answer <- c(wrapper, original, wrapper)
return(answer)
}
# Ex 5bis
outside <- function(v) {
first <- v[1]
last <- v[length(v)]
answer <- c(first, last)
return(answer)
}
vp = c("hello","world")
quit
m
# Ex 5:
fence <- function(original, wrapper) {
answer <- c(wrapper, original, wrapper)
return(answer)
}
# Ex 5bis
outside <- function(v) {
first <- v[1]
last <- v[length(v)]
answer <- c(first, last)
return(answer)
}
# Ex 5:
fence <- function(original, wrapper) {
answer <- c(wrapper, original, wrapper)
return(answer)
}
# Ex 5bis
outside <- function(v) {
first <- v[1]
last <- v[length(v)]
answer <- c(first, last)
return(answer)
}
vc = c("***")
fence(vc,vp)
fence(vp,vc)
oustide(fence(vp,vc))
outside <- function(v) {
first <- v[1]
last <- v[length(v)]
answer <- c(first, last)
return(answer)
}
oustide(fence(vp,vc))
outside(fence(vp,vc))
